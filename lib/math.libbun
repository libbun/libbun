## math common library
## based on EcmaScript Math Object

math-E: float
 bun: math~math::E
 c:   <math.h>~MATH_E
 py: math~math.e

math-PI: float
 bun: math~math::PI
 c:   <math.h>~MATH_PI
 py: math~math.pi

math-abs: Func<int,int>
 #: abs(x) returns the absolute value of x 
 bun: math~math::abs($[0])
 c:   <stdlib.h>~labs($[0])
 py: math~math.abs($[0])

math-abs: Func<float,float>
 #: abs(x) returns the absolute value of x 
 bun: math~math::abs($[0])
 c:   <math.h>~fabs($[0])
 py: math~math.abs($[0])
 
math-sin: Func<float,float>
 #: sin(x) returns the sine of $x ($x is in radians)
 bun: math~math::sin($[0])
 c:   <math.h>~sin($[0])
 py: math~math.sin($[0])

math-cos: Func<float,float>
 #: cos(x) returns the cosine of $x ($x is in radians)
 bun: math~math::cos($[0])
 c:   <math.h>~cos($[0])
 py: math~math.cos($[0])

math-tan: Func<float,float>
 #: sin(x) Returns the tangent of $x
 bun: math~math::tan($[0])
 c:   <math.h>~tan($[0])
 py: math~math.tan($[0])

math-sqrt: Func<float,float>
 #: sqrt(x) returns the square root of x
 bun: math~math::sqrt($[0])
 c:   <math.h>~sqrt($[0])
 py: math~math.sqrt($[0])

math-acos: Func<float,float>
 #: acos(x)	returns the arccosine of $x, in radians
 bun: math~math::acos($[0])
 c:   <math.h>~acos($[0])
 py: math~math.acos($[0])
  
math-asin: Func<float,float>
 #: asin(x)	returns the arcsine of $x, in radians
 bun: math~math::asin($[0])
 c:   <math.h>~asin($[0])
 py: math~math.asin($[0])
 
math-atan: Func<float,float>
 #: atan(x)	returns the arctangent of $x as a numeric value between -math::PI/2 and math::PI/2 radians
 bun: math~math::atan($[0])
 c:   <math.h>~atan($[0])
 py: math~math.atan($[0])
 
math-atan2: Func<float,float>
 #: atan2(x,y) returns the arctangent of the quotient of its arguments
 bun: math~math::atan2($[0], $[1])
 c:   <math.h>~atan2($[0], $[1])
 py: math~math.atan2($[0], $[1])

math-ceil: Func<float,float>
 #: ceil(x)	returns x, rounded upwards to the nearest integer
 bun: math~math::ceil($[0])
 c:   <math.h>~ceil($[0])
 py: math~math.ceil($[0])

math-exp: Func<float,float>
 #: exp(x) returns the value of Ex
 bun: math~math::exp($[0])
 c:   <math.h>~exp($[0])
 py: math~math.exp($[0])

math-floor: Func<float,float>
 #: floor(x) returns x, rounded downwards to the nearest integer
 bun: math~math::floor($[0])
 c:   <math.h>~floor($[0])
 py: math~math.floor($[0])

math-log: Func<float,float>
 #: log(x)	Returns the natural logarithm (base E) of $x
 bun: math~math::log($[0])
 c:   <math.h>~log($[0])
 py: math~math.log($[0])

math-max: Func<float,float,float>
 #: max(x,y) returns the number with the highest value
 bun: math~math::max($[0], $[1])
 c:   @fmax2~libbun_fmax($[0], $[1])
 py: math~math.max($[0], $[1])
 
math-min: Func<float,float,float>
 #: min(x,y) returns the number with the lowest value
 bun: math~math::min($[0], $[1])
 c:   @fmin2~libbun_fmin($[0], $[1])
 py: math~math.min($[0], $[1])

math-max: Func<int,int,int>
 #: max(x,y) returns the number with the highest value
 bun: math~math::max($[0], $[1])
 c:   @imax2~libbun_imax($[0], $[1])
 py: math~math.max($[0], $[1])
 
math-min: Func<int,int,int>
 #: min(x,y) returns the number with the lowest value
 bun: math~math::min($[0], $[1])
 c:   @imin2~libbun_imin($[0], $[1])
 py: math~math.min($[0], $[1])

math-pow: Func<float,float,float>
 #: pow(x,y) returns the value of $x to the power of $y
 bun: math~math::pow($[0], $[1]) 
 c:   <math.h>~pow($[0], $[1]) 
 py: math~math.pow($[0], $[1]) 

math-random: Func<float,float>
 #: random() returns a random number between 0 and 1
 bun: math~math::round($[0])
 c:   @random~libbun_round($[0])
 py: math~math.round($[0])
