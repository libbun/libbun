define assert  "console.assert($[0], $[1])": Func<boolean,String,void>;
define print   "console.log($[0])" : Func<String,void>;
define println "console.log($[0])" : Func<String,void>;

define / "Math.floor($[0] / $[1])" : Func<int,int,int>;

// converter
define _ "$[0]" : Func<int,float>;
define _ "($[0]|0)" : Func<float,int>;
define _ "String($[0])" : Func<boolean,String>;
define _ "String($[0])" : Func<int,String>;
define _ "String($[0])" : Func<float,String>;
define _ "String($[0])" : Func<α[],String>;
define _ "String($[0])" : Func<Object,String>;
define _ "parseInt($[0])" : Func<String,int>;
define _ "parseFloat($[0])" : Func<String,float>;


// String
//define + "zstr($[0]) + zstr($[1])" : Func<String,String,String>;
define size "$[0].length" : Func<String,int>;
define substring "$[0].substring($[1])" : Func<String,int,String>;
define substring "$[0].substring($[1],$[2])" : Func<String,int,int,String>;
define indexOf "$[0].indexOf($[1])" : Func<String,String,int>;
define indexOf "$[0].indexOf($[1], $[2])" : Func<String,int,String,int>;
define equals "($[0] === $[1])" : Func<String,String,boolean>;
define startsWith "($[0].lastIndexOf($[1], 0) === 0)" : Func<String,String,boolean>;
define endsWith "($[0].slice(- $[1].length) === $[1])" : Func<String,String,boolean>;

// Array
define size "$[0].length" : Func<α[],int>;
define clear "$[0].splice(0, $[0].length)" : Func<α[],int,void>;
define add "$[0].push($[1])" : Func<α[],α,void>;
define add "$[0].splice($[1], 0, $[2])" : Func<α[],int,α,void>;

// Map
define containsKey "($[1] in $[0])" : Func<Object, boolean>;
