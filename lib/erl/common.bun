
define print   "io:format($[0])" : Func<String,void>;
define println "io:format($[0])" : Func<String,void>;

// converter
define _ "float($[0])" : Func<int,float>;
define _ "trunc($[0])" : Func<float,int>;
define _ "atom_to_list($[0])" : Func<boolean,String>;
define _ "digits($[0])" : Func<int,String>;
define _ "digits($[0])" : Func<float,String>;

// String
define + "string:concat(zstr($[0]), zstr($[1]))" : Func<String,String,String>;
define size "string:len($[0])" : Func<String,int>;
define substring "string:substr($[0], $[1] + 1)" : Func<String,int,String>;
define substring "string:substr($[0], $[1] + 1, $[2])" : Func<String,int,int,String>;
define indexOf "(string:str($[0], $[1]) - 1)" : Func<String,String,int>;
// define indexOf "$[0][$[1]:].find($[2])" : Func<String,int,String,int>;
define equals "$[0] =:= $[1]" : Func<String,String,boolean>;
define startsWith "(string:str($[0], $[1]) =:= 1)" : Func<String,String,boolean>;
define endsWith "(string:str(lists:reverse($[0]), lists:reverse($[1])) =:= 1)" : Func<String,String,boolean>;

// // Array
// define size "len($[0])" : Func<α[],int>;
// define clear "libzen~zclear($[0], $[1])" : Func<α[],int,void>;
// define add "$[0].append($[1])" : Func<α[],α,void>;
// define add "$[0].insert($[1], $[2])" : Func<α[],int,α,void>;

