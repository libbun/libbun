asm macro assert  "libbun/encode/jvm/JavaCommonApi.Assert($[0],$[1])": Func<boolean,String,void>;
asm macro print   "libbun/encode/jvm/JavaCommonApi.Print($[0])" : Func<String,void>;
asm macro println "libbun/encode/jvm/JavaCommonApi.PrintLine($[0])" : Func<String,void>;

// converter
asm macro _ "libbun/encode/jvm/JavaCommonApi.IntToFloat($[0])" : Func<int,float>;
asm macro _ "libbun/encode/jvm/JavaCommonApi.FloatToInt($[0])" : Func<float,int>;
asm macro _ "libbun/encode/jvm/JavaCommonApi.ToString($[0])" : Func<boolean,String>;
asm macro _ "libbun/encode/jvm/JavaCommonApi.ToString($[0])" : Func<int,String>;
asm macro _ "libbun/encode/jvm/JavaCommonApi.ToString($[0])" : Func<float,String>;

// String
//asm macro + "zstr($[0]) + zstr($[1])" : Func<String,String,String>;
asm macro size "libbun/encode/jvm/JavaCommonApi.StringSize($[0])" : Func<String,int>;
asm macro substring "libbun/encode/jvm/JavaCommonApi.SubString($[0],$[1])" : Func<String,int,String>;
asm macro substring "libbun/encode/jvm/JavaCommonApi.SubString($[0],$[1],$[2])" : Func<String,int,int,String>;
asm macro indexOf "libbun/encode/jvm/JavaCommonApi.IndexOf($[0],$[1])" : Func<String,String,int>;
asm macro indexOf "libbun/encode/jvm/JavaCommonApi.IndexOf($[0],$[1],$[2])" : Func<String,String,int,int>;
asm macro equals "libbun/encode/jvm/JavaCommonApi.Equals($[0],$[1])" : Func<String,String,boolean>;
asm macro startsWith "libbun/encode/jvm/JavaCommonApi.StartsWith($[0],$[1])" : Func<String,String,boolean>;
asm macro endsWith "libbun/encode/jvm/JavaCommonApi.EndsWith($[0],$[1])" : Func<String,String,boolean>;

// Array
// ObjectArray
asm macro size "libbun/encode/jvm/JavaCommonApi.ObjectArraySize($[0])" : Func<α[],int>;
asm macro clear "libbun/encode/jvm/JavaCommonApi.ObjectArrayClear($[0],$[1])" : Func<α[],int,void>;
asm macro add "libbun/encode/jvm/JavaCommonApi.ObjectArrayAdd($[0],$[1])" : Func<α[],α,void>;
asm macro add "libbun/encode/jvm/JavaCommonApi.ObjectArrayInsert($[0],$[1],$[2])" : Func<α[],int,α,void>;
asm macro _ "libbun/encode/jvm/JavaCommonApi.ObjectArrayToString($[0])" : Func<α[],String>;
// BooleanArray
asm macro size "libbun/encode/jvm/JavaCommonApi.BooleanArraySize($[0])" : Func<boolean[],int>;
asm macro clear "libbun/encode/jvm/JavaCommonApi.BooleanArrayClear($[0],$[1])" : Func<boolean[],int,void>;
asm macro add "libbun/encode/jvm/JavaCommonApi.BooleanArrayAdd($[0],$[1])" : Func<boolean[],boolean,void>;
asm macro add "libbun/encode/jvm/JavaCommonApi.BooleanArrayInsert($[0],$[1],$[2])" : Func<boolean[],int,boolean,void>;
asm macro _ "libbun/encode/jvm/JavaCommonApi.BooleanArrayToString($[0])" : Func<boolean[],String>;
// IntArray
asm macro size "libbun/encode/jvm/JavaCommonApi.IntArraySize($[0])" : Func<int[],int>;
asm macro clear "libbun/encode/jvm/JavaCommonApi.IntArrayClear($[0],$[1])" : Func<int[],int,void>;
asm macro add "libbun/encode/jvm/JavaCommonApi.IntArrayAdd($[0],$[1])" : Func<int[],int,void>;
asm macro add "libbun/encode/jvm/JavaCommonApi.IntArrayInsert($[0],$[1],$[2])" : Func<int[],int,int,void>;
asm macro _ "libbun/encode/jvm/JavaCommonApi.IntArrayToString($[0])" : Func<int[],String>;
// FloatArray
asm macro size "libbun/encode/jvm/JavaCommonApi.FloatArraySize($[0])" : Func<float[],int>;
asm macro clear "libbun/encode/jvm/JavaCommonApi.FloatArrayClear($[0],$[1])" : Func<float[],float,void>;
asm macro add "libbun/encode/jvm/JavaCommonApi.FloatArrayAdd($[0],$[1])" : Func<float[],int,void>;
asm macro add "libbun/encode/jvm/JavaCommonApi.FloatArrayInsert($[0],$[1],$[2])" : Func<float[],int,float,void>;
asm macro _ "libbun/encode/jvm/JavaCommonApi.FloatArrayToString($[0])" : Func<float[],String>;
// StringArray
asm macro size "libbun/encode/jvm/JavaCommonApi.StringArraySize($[0])" : Func<String[],int>;
asm macro clear "libbun/encode/jvm/JavaCommonApi.StringArrayClear($[0],$[1])" : Func<String[],int,void>;
asm macro add "libbun/encode/jvm/JavaCommonApi.StringArrayAdd($[0],$[1])" : Func<String[],String,void>;
asm macro add "libbun/encode/jvm/JavaCommonApi.StringArrayInsert($[0],$[1],$[2])" : Func<String[],int,String,void>;
asm macro _ "libbun/encode/jvm/JavaCommonApi.StringArrayToString($[0])" : Func<String[],String>;

// Map
asm macro containsKey "libbun/encode/jvm/JavaCommonApi.MapContainsKey($[0],$[1])" : Func<Map<α>,String,boolean>;
asm macro _ "libbun/encode/jvm/JavaCommonApi.MapToString($[0])" : Func<Map<α>,String>;

// Object
asm macro _ "libbun/encode/jvm/JavaCommonApi.ObjectToString($[0])" : Func<Object,String>;