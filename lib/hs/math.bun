// math common library
// based on EcmaScript Math Object

//asm("import math");

//E	Returns Euler's number (approx. 2.718)
//TODO: LN2	Returns the natural logarithm of 2 (approx. 0.693)
//TODO: LN10	Returns the natural logarithm of 10 (approx. 2.302)
//TODO: LOG2E	Returns the base-2 logarithm of E (approx. 1.442)
//TODO: LOG10E	Returns the base-10 logarithm of E (approx. 0.434)
//PI	Returns PI (approx. 3.14)
//TODO: SQRT1_2	Returns the square root of 1/2 (approx. 0.707)
//TODO: SQRT2	Returns the square root of 2 (approx. 1.414)

asm macro _E   "exp 1": float;
asm macro _PI  "pi": float;

// abs(x)	Returns the absolute value of x
asm macro abs  "abs ($[0])": Func<float,float>;

//sin(x)	Returns the sine of x (x is in radians)
//cos(x)	Returns the cosine of x (x is in radians)
//tan(x)	Returns the tangent of an angle
asm macro cos   "cos $[0]" : Func<float,float>;
asm macro sin   "sin $[0]" : Func<float,float>;
asm macro tan   "tan $[0]" : Func<float,float>;

//sqrt(x)	Returns the square root of x
asm macro sqrt "sqrt $[0]" : Func<float,float>;

//acos(x)	Returns the arccosine of x, in radians
//asin(x)	Returns the arcsine of x, in radians
//atan(x)	Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians
//atan2(y,x)	Returns the arctangent of the quotient of its arguments

asm macro acos "acos $[0]" : Func<float,float>;
asm macro asin "asin $[0]" : Func<float,float>;
asm macro atan "atan $[0]" : Func<float,float>;
asm macro atan2 "atan2 $[0] $[1]" : Func<float,float,float>;

//ceil(x)	Returns x, rounded upwards to the nearest integer
//exp(x)	Returns the value of Ex
//floor(x)	Returns x, rounded downwards to the nearest integer
//log(x)	Returns the natural logarithm (base E) of x

asm macro ceil "ceiling $[0]" : Func<float,float>;
asm macro exp "exp $[0]" : Func<float,float>;
asm macro floor "floor $[0]" : Func<float,float>;
asm macro log "log $[0]" : Func<float,float>;

//TODO: max(x,y,z,...,n)	Returns the number with the highest value
//TODO: min(x,y,z,...,n)	Returns the number with the lowest value
asm macro max "max $[0] $[1]" : Func<float,float,float>;
asm macro min "min $[0] $[1]" : Func<float,float,float>;
asm macro max "max $[0] $[1]" : Func<int,int,int>;
asm macro min "min $[0] $[1]" : Func<int,int,int>;

//pow(x,y)	Returns the value of x to the power of y
asm macro pow "$[0] ^ $[1]" : Func<float,float,float>;

//random()	Returns a random number between 0 and 1
asm macro round "round $[0]" : Func<float,float>;

asm macro random "System.Random~getStdRandom (randomR (0.0,1.0))" :Func<float>;
