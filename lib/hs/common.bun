define assert  "Control.Exception~return(assert ($[0]) $[1])": Func<boolean,String,void>;
define print   "putStr $[0]" : Func<String,void>;
define println "putStrLn $[0]" : Func<String,void>;

// converter
define _ "fromIntegral $[0] :: Float" : Func<int,float>;
define _ "round $[0]" : Func<float,int>;
define _ "show $[0]" : Func<boolean,String>;
define _ "show ($[0] :: Int)" : Func<int,String>;
define _ "show ($[0] :: Float)" : Func<float,String>;

// String
define + "($[0] ++ $[1])" : Func<String,String,String>;
define size "length $[0]" : Func<String,int>;
define substring "drop $[1] $[0]" : Func<String,int,String>;
define substring "drop $[1] (take $[2] $[0])" : Func<String,int,int,String>;
define indexOf "Data.List~head [fst x| x <- zip [0..] (tails $[0]), (snd x) == $[1]]" : Func<String,String,int>;
define indexOf "Data.List~head [fst x| x <- zip [$[1]..] (tails (drop $[1] $[0])), (snd x) == $[2]]" : Func<String,int,String,int>;
define equals "$[0] == $[1]" : Func<String,String,boolean>;
define startsWith "(take (length $[1]) $[0]) == $[1]" : Func<String,String,boolean>;
define endsWith "(drop ((length $[0]) - (length $[1])) $[0]) == $[1]" : Func<String,String,boolean>;

// Array
define size "length $[0]" : Func<α[],int>;
define clear "take $[1] $[0]" : Func<α[],int,void>;
define add "$[0] ++ [$[1]]" : Func<α[],α,void>;
define add "let (ys,zs) = splitAt $[1] $[0] in ys ++ [$[2]] ++ zs" : Func<α[],int,α,void>;
