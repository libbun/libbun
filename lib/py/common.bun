
define assert  "assert $[0], $[1]": Func<boolean,String,void>;
define print   "print $[0]," : Func<String,void>;
define println "print $[0]" : Func<String,void>;

// converter
define _ "float($[0])" : Func<int,float>;
define _ "int($[0])" : Func<float,int>;
define _ "(\'true\' if $[0] else \'false\')" : Func<boolean,String>;
define _ "str($[0])" : Func<int,String>;
define _ "(\"%.5f\" % ($[0]))" : Func<float,String>;

// String
define + "zstr($[0]) + zstr($[1])" : Func<String,String,String>;
define size "len($[0])" : Func<String,int>;
define substring "$[0][$[1]:]" : Func<String,int,String>;
define substring "$[0][$[1]:$[2]]" : Func<String,int,int,String>;
define indexOf "$[0].find($[1])" : Func<String,String,int>;
define indexOf "$[0][$[1]:].find($[2])" : Func<String,int,String,int>;
define equals "$[0] == $[1]" : Func<String,String,boolean>;
define startsWith "$[0].startswith($[1])" : Func<String,String,boolean>;
define endsWith "$[0].endswith($[1])" : Func<String,String,boolean>;

// Array
define size "len($[0])" : Func<α[],int>;
define clear "libzen~zclear($[0], $[1])" : Func<α[],int,void>;
define add "$[0].append($[1])" : Func<α[],α,void>;
define add "$[0].insert($[1], $[2])" : Func<α[],int,α,void>;

