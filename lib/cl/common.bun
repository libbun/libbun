asm macro assert  "(assert $[0])": Func<boolean,String,void>;
asm macro print   "(format t \"~a\" $[0])" : Func<String,void>;
asm macro println "(format t \"~a~%\" $[0])" : Func<String,void>;

// converter
asm macro _ "(coerce $[0] 'float)" : Func<int,float>;
asm macro _ "(round $[0])" : Func<float,int>;
asm macro _ "(format nil \"~a\" $[0])" : Func<boolean,String>;
asm macro _ "(format nil \"~a\" $[0])" : Func<int,String>;
asm macro _ "(format nil \"~a\" $[0])" : Func<float,String>;

// String
asm macro + "(concatenate 'string $[0] $[1])" : Func<String,String,String>;
asm macro size "(length $[0])" : Func<String,int>;
asm macro substring "(subseq $[0] $[1])" : Func<String,int,String>;
asm macro substring "(subseq $[0] $[1] $[2])" : Func<String,int,int,String>;
asm macro indexOf "(or (search $[1] $[0]) -1)" : Func<String,String,int>;
asm macro indexOf "(or (search $[2] $[0] :start2 $[1]) -1)" : Func<String,int,String,int>;
asm macro equals "(string= $[0] $[1])" : Func<String,String,boolean>;
asm macro startsWith "(string= (subseq $[0] 0 (length $[1])) $[1])" : Func<String,String,boolean>;
asm macro endsWith "(let ((spos (- (length $[0]) (length $[1])))) (and (>= spos 0) (string= (subseq $[0] spos (length $[0])) $[1])))" : Func<String,String,boolean>;

// Array
asm macro size "(length $[0])" : Func<α[],int>;
asm macro clear "(setf (nthcdr $[1] $[0]) nil)" : Func<α[],int,void>;
asm macro add "(append $[0] (list $[1]))" : Func<α[],α,void>;
asm macro add "(progn (push $[2] (cdr (nthcdr $[1] $[0]))) $[0])" : Func<α[],int,α,void>;
