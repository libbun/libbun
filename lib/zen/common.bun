asm macro assert  "assert($[0],$[1])": Func<boolean,String,void>;
asm macro print   "print($[0])" : Func<String,void>;
asm macro println "println($[0])" : Func<String,void>;

// converter
asm macro _ "(float)($[0])" : Func<int,float>;
asm macro _ "(int)($[0])" : Func<float,int>;
asm macro _ "(String)($[0])" : Func<boolean,String>;
asm macro _ "(String)($[0])" : Func<int,String>;
asm macro _ "(String)($[0])" : Func<float,String>;

// String
//asm macro + "zstr($[0]) + zstr($[1])" : Func<String,String,String>;
asm macro size "$[0].size()" : Func<String,int>;
asm macro substring "$[0].substring($[1])" : Func<String,int,String>;
asm macro substring "$[0].substring($[1],$[2])" : Func<String,int,int,String>;
asm macro indexOf "$[0].indexOf($[1])" : Func<String,String,int>;
asm macro indexOf "$[0].indexOf($[1],$[2])" : Func<String,int,String,int>;
asm macro equals "$[0] == $[1]" : Func<String,String,boolean>;
asm macro startsWith "$[0].startsWith($[1])" : Func<String,String,boolean>;
asm macro endsWith "$[0].endsWith($[1])" : Func<String,String,boolean>;

// Array
asm macro size "$[0].size()" : Func<α[],int>;
asm macro clear "$[0].clear($[0], $[1])" : Func<α[],int,void>;
asm macro add "$[0].add($[1])" : Func<α[],α,void>;
asm macro add "$[0].add($[1], $[2])" : Func<α[],int,α,void>;
asm macro _ "(String)($[0])" : Func<α[],String>;

// Object
asm macro _ "(String)($[0])" : Func<Object,String>;
